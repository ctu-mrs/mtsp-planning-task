name: simulation
root: ./
startup_window: start_planning
pre_window: export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export WORLD_FILE=./custom_configs/world.yaml
windows:
  - roscore:
      layout: tiled
      panes:
        - roscore
  - gazebo:
      layout: tiled
      panes:
        - waitForRos; roslaunch mrs_simulation simulation.launch world_name:=grass_plane gui:=true
  - status:
      layout: tiled
      panes:
        - export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch
        - export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch
  - spawn:
      layout: tiled
      panes:
        - waitForSimulation; spawn_uav 1 --$UAV_TYPE --run --delete --enable-rangefinder --enable-ground-truth --file pos1.yaml
        - waitForSimulation; spawn_uav 2 --$UAV_TYPE --run --delete --enable-rangefinder --enable-ground-truth --file pos2.yaml
  - control:
      layout: tiled
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml
        - export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml
  - automatic_start:
      layout: tiled
      panes:
        - export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch custom_config:=./custom_configs/automatic_start.yaml
        - export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch custom_config:=./custom_configs/automatic_start.yaml
  - state_machine:
      layout: even-vertical
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch mtsp_state_machine simulation.launch
  - problem_loader:
      layout: even-vertical
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch mtsp_problem_loader problem_loader.launch
  - planner:
      layout: even-vertical
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch mtsp_planner planner.launch
  - start_planning:
      layout: even-vertical
      synchronize: after
      panes:
        - 'export UAV_NAME=uav1;
          history -s rosservice call /$UAV_NAME/mtsp_state_machine/start'
  - takeoff:
      layout: tiled
      synchronize: after
      panes:
        # #{ uav1
        - 'export UAV_NAME=uav1;
          history -s $(echo rosservice call /$UAV_NAME/mavros/cmd/arming 1\; sleep 2\; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard)
          '
        # #}
        # #{ uav2
        - 'export UAV_NAME=uav2;
          history -s $(echo rosservice call /$UAV_NAME/mavros/cmd/arming 1\; sleep 2\; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard)
          '
        # #}
  - goto:
      layout: tiled
      synchronize: after
      panes:
        - 'export UAV_NAME=uav1;
          history -s rosservice call /$UAV_NAME/control_manager/goto \"goal: \[10.0, 0.0, 3.0, 0.0\]\";
          history -s rosservice call /$UAV_NAME/control_manager/goto \"goal: \[-10.0, 0.0, 3.0, 0.0\]\"'
        - 'export UAV_NAME=uav2;
          history -s rosservice call /$UAV_NAME/control_manager/goto \"goal: \[-10.0, 0.0, 3.0, 0.0\]\";
          history -s rosservice call /$UAV_NAME/control_manager/goto \"goal: \[10.0, 0.0, 3.0, 0.0\]\"'
  - gazebo_camera_follow:
      layout: tiled
      panes:
        - waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1
  - rviz:
      layout: even-vertical
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch mtsp_state_machine rviz.launch
        - export UAV_NAME=uav1; read; waitForOdometry; rosrun rqt_reconfigure rqt_reconfigure
        - export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_odometry tf_connector_dummy.launch
        - export UAV_NAME=uav1; waitForRos; roslaunch mrs_rviz_plugins load_robot.launch
        - export UAV_NAME=uav2; waitForRos; roslaunch mrs_rviz_plugins load_robot.launch
